@using Wayfinder.Data.Models;


@namespace Wayfinder.Pages.Components.Application


@inject IJSRuntime JS;
@inject Wayfinder.Data.WayfinderDbContext Data;
@inject Wayfinder.Services.WayfinderLogic Logic;



<div style="border:1px; border-style:solid;">
    <TermInput ElementID=@this.TermAElementID @bind-CurrentTermSelectionRaw=this.TermARaw />
    is
    <TermInput ElementID=@this.TermRelElementID @bind-CurrentTermSelectionRaw=this.TermBRaw />
    for
    <TermInput ElementID=@this.TermBElementID @bind-CurrentTermSelectionRaw=this.TermRelRaw />

    <label for="@this.IsFactElementID">Is fact?</label>
    <input type="checkbox"
            name="@this.IsFactElementID"
            @bind-value=this.IsFact />

    <label for="@this.IsImpossibleElementID">Is impossible?</label>
    <input type="checkbox"
            name="@this.IsImpossibleElementID"
            @bind-value=this.IsImpossible />

    <button type="button"
            class="input-group-btn btn"
            disabled=@(this.CanSubmitNewConcept() == false)
            @onclick=@(this.SubmitNewConcept_Async)>
        Create
    </button>
</div>



@code {
    [Parameter, EditorRequired]
    public string ElementID { get; set; } = null!;

    [Parameter, EditorRequired]
    public string DataBinding { get; set; } = null!;

    ////

    private string TermAElementID => $"{this.ElementID}_term_a";
    private string TermBElementID => $"{this.ElementID}_term_b";
    private string TermRelElementID => $"{this.ElementID}_term_rel";
    private string IsFactElementID => $"{this.ElementID}_isfact";
    private string IsImpossibleElementID => $"{this.ElementID}_isimpossible";


    ////

    public object? TermARaw {
        get => this._TermARaw;
        set {
            if( this._TermARaw != value ) {
                this.CurrentConceptRaw = null;
            }
            this._TermARaw = value;
        }
    }

    public object? TermBRaw {
        get => this._TermBRaw;
        set {
            if( this._TermBRaw != value ) {
                this.CurrentConceptRaw = null;
            }
            this._TermBRaw = value;
        }
    }

    public object? TermRelRaw {
        get => this._TermRelRaw;
        set {
            if( this._TermRelRaw != value ) {
                this.CurrentConceptRaw = null;
            }
            this._TermRelRaw = value;
        }
    }

    public bool IsFact {
        get => this._IsFact;
        set {
            if( this._IsFact != value ) {
                this.CurrentConceptRaw = null;
            }
            this._IsFact = value;
        }
    }

    public bool IsImpossible {
        get => this._IsImpossible;
        set {
            if( this._IsImpossible != value ) {
                this.CurrentConceptRaw = null;
            }
            this._IsImpossible = value;
        }
    }

    public object? ScheduleRaw {
        get => this._ScheduleRaw;
        set {
            if( this._ScheduleRaw != value ) {
                this.CurrentConceptRaw = null;
            }
            this._ScheduleRaw = value;
        }
    }

    private object? _TermARaw;
    private object? _TermBRaw;
    private object? _TermRelRaw;
    private bool _IsFact;
    private bool _IsImpossible;
    private object? _ScheduleRaw;


    ////

    [Parameter]
    public object? CurrentConceptRaw {
        get => this._CurrentConceptRaw;
        set {
            if( this._CurrentConceptRaw != value ) {
                this.CurrentConceptRawChanged.InvokeAsync( value );

                if( value is not null ) {
                    var concept = (ConceptEntry)value;

                    this._TermARaw = concept.TermA;
                    this._TermBRaw = concept.TermB;
                    this._TermRelRaw = concept.TermRel;
                    this._IsFact = concept.IsFact;
                    this._IsImpossible = concept.IsImpossible;
                    this._ScheduleRaw = concept.Schedule;
                }
            }
            this._CurrentConceptRaw = value;
        }
    }

    private object? _CurrentConceptRaw { get; set; }

    [Parameter]
    public EventCallback<object?> CurrentConceptRawChanged { get; set; }



    ////////////////

    protected async override Task OnAfterRenderAsync( bool firstRender ) {
        ConceptEntry concept = await this.Logic.GetOrInitConcept_Async( this.Data, this.DataBinding );

        this._CurrentConceptRaw = concept;
        this._TermARaw = concept?.TermA;
        this._TermBRaw = concept?.TermB;
        this._TermRelRaw = concept?.TermRel;
        this._IsFact = concept?.IsFact ?? this._IsFact;
        this._IsImpossible = concept?.IsImpossible ?? this._IsFact;
        this._ScheduleRaw = concept?.Schedule ??
            await this.Logic.GetOrInitSchedule_Async( this.Data, this.DataBinding );

        await base.OnAfterRenderAsync( firstRender );
    }


    ////////////////

    public bool CanSubmitNewConcept() {
        //Console.WriteLine( $"{this.CurrentConceptRaw is null} {this.TermARaw is not null} {this.TermBRaw is not null} {this.TermRelRaw is not null}" );
        return this.CurrentConceptRaw is null &&
            this.TermARaw is not null &&
            this.TermBRaw is not null &&
            this.TermRelRaw is not null &&
            this.ScheduleRaw is not null;
    }

    ////

    public async Task SubmitNewConcept_Async() {
        if( !this.CanSubmitNewConcept() ) {
            throw new Exception( $"Could not submit new Concept for {this.ElementID}." );
        }

        var newConcept = new ConceptEntry {
            TermA = (TermEntry)(this.TermARaw ?? throw new NullReferenceException()),
            TermB = (TermEntry)(this.TermBRaw ?? throw new NullReferenceException()),
            TermRel = (TermEntry)(this.TermRelRaw ?? throw new NullReferenceException()),
            IsFact = this.IsFact,
            IsImpossible = this.IsImpossible,
            Schedule = (ScheduleEntry)(this.ScheduleRaw ?? throw new NullReferenceException())
        };

        await this.Data.Concepts.AddAsync( newConcept );
        
        int rowsChanged = await this.Data.SaveChangesAsync();

        if( rowsChanged == 1 ) {
            this.CurrentConceptRaw = newConcept;

            this.Logic.ClearConcept( this.DataBinding );
        } else {
            this.CurrentConceptRaw = null;

            await JS.InvokeVoidAsync( "CustomAlert", $"Failed Concept input for {this.ElementID}" );
        }
    }
}
