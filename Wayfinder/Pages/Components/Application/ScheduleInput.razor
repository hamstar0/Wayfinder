@using Wayfinder.Data;
@using Wayfinder.Data.Models;
@using Wayfinder.Pages.Components.Controls;


@namespace Wayfinder.Pages.Components.Application


@inject IJSRuntime JS;
@inject Wayfinder.Data.WayfinderDbContext Data;
@inject Wayfinder.Services.WayfinderLogic Logic;



<div id="@this.ElementID" class="schedule-component-container">
    <div>
        <OptionsStaticSingle ElementID='@($"{this.ElementID}_scale_controls")'
                    Disabled=@this.Disabled
                    Options=@( Enum.GetNames( typeof(ScheduleInput.ZoomStates) )
                        .Select( v => (v, v) )
                    )
                    CurrentOptionsChanged=@( async e => this.ApplyZoom(e) ) />
        <ToggleSwitch ElementID='@($"{this.ElementID}_draw_mode_toggle")'
                    Disabled=@this.Disabled
                    Label="Draw Time Segments" />
    </div>
    <div id='@($"{this.ElementID}_timeline")'
                class="schedule-component"
                disabled=@this.Disabled
                @onmousedown=this.BeginDraw
                @onmouseleave=this.EndDrawIf
                @onmouseup=this.EndDrawIf
                @ref=this.TimelineElement>
    </div>
</div>



@code {
    public enum ZoomStates : int {
        Years, Months, Days, Hours, Minutes
    }



    [Parameter, EditorRequired]
    public string ElementID { get; set; } = null!;

    [Parameter, EditorRequired]
    public string DataBinding { get; set; } = null!;

    [Parameter]
    public bool Disabled { get; set; } = false;


    ////

    public ScheduleEntry? CurrentSchedule {
        get => (ScheduleEntry?)this._CurrentScheduleRaw;
        set => this.CurrentScheduleRaw = value;
    }

    [Parameter]
    public object? CurrentScheduleRaw {
        get => this._CurrentScheduleRaw;
        set {
            if( this._CurrentScheduleRaw != value ) {
                this.CurrentScheduleRawChanged.InvokeAsync( value );
            }
            this._CurrentScheduleRaw = value;
        }
    }

    private object? _CurrentScheduleRaw;

    [Parameter]
    public EventCallback<object?> CurrentScheduleRawChanged { get; set; }


    ////

    private ElementReference TimelineElement;



    ////////////////

    protected override async Task OnAfterRenderAsync( bool firstRender ) {
        if( this.CurrentSchedule is null ) {
            this._CurrentScheduleRaw = await this.Logic.GetOrInitSchedule_Async( this.Data, this.DataBinding );

            await JS.InvokeVoidAsync(
                "ScheduleInput.InitializeComponent",
                this.TimelineElement
            );
        }

        if( this.CurrentSchedule?.Events is not null && this.CurrentSchedule.Events.Count > 0 ) {
            await JS.InvokeVoidAsync(
                "ScheduleInput.PopulateTimelineEvents",
                this.ElementID,
                this.CurrentSchedule.Events
                    .Select( e => new long[] {
                        WayfinderDbContext.ConvertToTimestamp( e.StartTime ),
                        WayfinderDbContext.ConvertToTimestamp( e.EndTime )
                    } )
                    .ToArray()
            );
        }

        await base.OnAfterRenderAsync( firstRender );
    }

    ////

    private async void ApplyZoom( string which ) {
        double zoomScale = 1d;

        switch( which ) {
        case "Years":
            zoomScale /= 60d;
            zoomScale /= 60d;
            zoomScale /= 24d;
            zoomScale /= 10d;//30d;
                             //zoomScale /= 365d;
            break;
        case "Months":
            zoomScale /= 60d;
            zoomScale /= 60d;
            zoomScale /= 24d;
            //zoomScale /= 30d;
            break;
        case "Days":
            zoomScale /= 60d;
            zoomScale /= 50d;//60d
                             //zoomScale /= 24d;
            break;
        case "Hours":
            zoomScale /= 60d;
            zoomScale /= 2.4d;//60d
            break;
        case "Minutes":
        default:
            zoomScale /= 2.4d;//60d;
            break;
        }

        await JS.InvokeVoidAsync(
            "ScheduleInput.ZoomScheduleTimeScale",
            this.TimelineElement,
            zoomScale
        );
    }

    ////

    private async Task BeginDraw() {
        await JS.InvokeVoidAsync(
            "ScheduleInput.BeginDrawingSegment",
            this.ElementID
        );
    }

    public record SegTime( long SegTimeBeg, long SegTimeEnd );

    private async Task EndDrawIf() {
        var segRaw = await JS.InvokeAsync<SegTime>(
            "ScheduleInput.EndDrawingSegmentIf",
            this.ElementID
        );

        if( segRaw == null ) {
            return;
        }

        //long segTimeBegMilli = long.Parse( segRaw.SegTimeBeg ); //* TimeSpan.TicksPerMillisecond;
        //long segTimeEndMilli = long.Parse( segRaw.SegTimeEnd ); //* TimeSpan.TicksPerMillisecond;
        
        await this.Logic.AddScheduleEvent_Async(
            ctx: this.Data,
            dataKey: this.DataBinding,
            startTime: WayfinderDbContext.EpochMillisecondsToDateTime( segRaw.SegTimeBeg ),
            endTime: WayfinderDbContext.EpochMillisecondsToDateTime( segRaw.SegTimeEnd ),
            startPosX: 0,
            startPosY: 0,
            endPosX: 0,
            endPosY: 0
        );
    }
}
